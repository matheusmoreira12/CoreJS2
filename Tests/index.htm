<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <script type="module" src="../framework/dist/index.js"></script>

    <style type="text/css">
        body {
            background: #fff;
            display: flex;
            flex-flow: row;
            flex-wrap: wrap;
        }
    </style>
</head>

<body>
    <script type="module">
        import * as Core from "../framework/dist/index.js";

        const Web = Core.Web;
        const Ajax = Web.Ajax.Ajax;
        const AjaxResponseType = Web.Ajax.AjaxResponseType;

        class CoreControl extends HTMLElement {
            constructor() {
                super();

                const shadow = this.attachShadow({ mode: "closed" });
                this.__shadow = shadow;

                const style = document.createElement("style");
                this.__style = style;
                style.innerHTML = "@import url('./controls.css');";
            }

            connectedCallback() {
                this.__shadow.appendChild(this.__style);
            }

            disconnectedCallback() {
                this.__style.remove();
            }
        }

        class CoreProgressBar extends CoreControl {
            constructor() {
                super();

                const fill = document.createElement("core-progress-bar-fill");
                this.__fill = fill;
            }

            __update() {
                if (this.indeterminate) {
                    this.__fill.style.flex = "1";
                    this.__fill.classList.add("core-progress-bar-fill-indeterminate");
                }
                else {
                    const normalizedValue = (this.value - this.min) / (this.max - this.min);
                    this.__fill.style.flex = normalizedValue;
                    this.__fill.classList.remove("core-progress-bar-fill-indeterminate");
                }
            }

            static get observedAttributes() {
                return ["core-min", "core-max", "core-value", "core-indeterminate"];
            }

            get min() { return this.__min; }
            set min(value) {
                this.__min = Math.min(this.value, this.max - Number.EPSILON);
                this.__update();
            }
            __min = 0;

            get max() { return this.__max; }
            set max(value) {
                this.__max = Math.max(value, this.min + Number.EPSILON);
                this.__update();
            }
            __max = 1;

            get value() { return this.__value; }
            set value(value) {
                this.__value = Math.max(Math.min(value, this.max), this.min);
                this.__indeterminate = false;
                this.__update();
            }
            __value = 0;

            get indeterminate() { return this.__indeterminate; }
            set indeterminate(value) {
                this.__indeterminate = value;
                this.__update();
            }
            __indeterminate = true;

            __min_attribute_changed(value) {
                this.min = Number(value);
            }

            __max_attribute_changed(value) {
                this.max = Number(value);
            }

            __value_attribute_changed(value) {
                this.value = Number(value);
            }

            __indeterminate_attribute_changed(value) {
                this.indeterminate = value !== null;
            }

            attributeChangedCallback(name, oldValue, newValue) {
                if (name == "core-min")
                    this.__min_attribute_changed(newValue);
                else if (name == "core-max")
                    this.__max_attribute_changed(newValue);
                else if (name == "core-value")
                    this.__value_attribute_changed(newValue);
                else if (name == "core-indeterminate")
                    this.__indeterminate_attribute_changed(newValue);
            }

            connectedCallback() {
                super.connectedCallback();

                this.__shadow.appendChild(this.__fill);

                this.__update();
            }

            disconnectedCallback() {
                super.disconnectedCallback();

                this.__fill.remove();
            }

            adoptedCallback() {

            }
        }
        customElements.define("core-progress-bar", CoreProgressBar)

        class CorePicture extends CoreControl {
            constructor() {
                super();

                this.__drop_shadow1 = document.createElement("core-picture-drop-shadow1");
                this.__drop_shadow2 = document.createElement("core-picture-drop-shadow2");
                this.__frame = document.createElement("core-picture-frame");
                this.__img = document.createElement("img");
                this.__innerShade = document.createElement("core-picture-inner-shade");
                this.__progressBarContainer = document.createElement("core-picture-progress-bar-container");

                const progressBar = document.createElement("core-progress-bar");
                this.__progressBar = progressBar;
            }

            connectedCallback() {
                super.connectedCallback();

                this.__shadow.appendChild(this.__drop_shadow1);
                this.__shadow.appendChild(this.__drop_shadow2);
                this.__shadow.appendChild(this.__frame);
                this.__frame.appendChild(this.__img);
                this.__shadow.appendChild(this.__innerShade);
                this.__shadow.appendChild(this.__progressBarContainer);
                this.__progressBarContainer.appendChild(this.__progressBar);
            }

            disconnectedCallback() {
                super.disconnectedCallback();

                this.__drop_shadow1.remove();
                this.__drop_shadow2.remove();
                this.__img.remove();
                this.__frame.remove();
                this.__innerShade.remove();
                this.__progressBar.remove();
                this.__progressBarContainer.remove();
            }

            static get observedAttributes() {
                return ["core-src"];
            }

            __hideImage() {
                this.__img.animate([
                        { opacity: 1 },
                        { opacity: 0 },
                    ],
                    {
                        duration: 436
                    }
                ).onfinish = () => {
                    this.__img.style.opacity = 0;
                }
            }

            __revealImage() {
                this.__img.animate([
                        { opacity: 0 },
                        { opacity: 1 },
                    ],
                    {
                        duration: 436
                    }
                ).onfinish = () => {
                    this.__img.style.opacity = 1;
                }
            }

            async __load(src) {
                let self = this;

                function onProgress(sender, args) {
                    self.__progressBar.value = args.loaded;
                    self.__progressBar.max = args.total;
                }

                this.__progressBar.indeterminate = true;
                this.__progressBar.hidden = false;                

                this.__img.style.width = "320px";
                this.__img.style.height = "240px";

                this.__hideImage();

                let blob = await Ajax.get(src, { onProgress }, { responseType: AjaxResponseType.Blob });
                this.__img.src = URL.createObjectURL(blob);

                this.__img.onload = () => this.__revealImage();

                this.__progressBar.hidden = true;
            }

            __update() {
                if (this.__src !== undefined && this.isConnected) {
                    this.__load(this.src);
                }
            }

            get src() { return this.__src; }
            set src(value) {
                this.__src = value;
                this.__update();
            }
            __src = "";

            __src_attribute_changed(value) {
                this.src = value;
            }

            attributeChangedCallback(name, oldValue, newValue) {
                if (name == "core-src")
                    this.__src_attribute_changed(newValue);
            }
        }
        customElements.define("core-picture", CorePicture);
    </script>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>

    <core-picture core-src="https://picsum.photos/320/240">
    </core-picture>
</body>

</html>