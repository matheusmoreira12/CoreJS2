<html>
<head>
    <script>
        window.onreadystatechange = function (event) { console.log(event); }
    </script>

    <script type="module" src="TestExports.m.js"></script>

    <script>
        const Consolify = new function () {
            const TAB_SPACING = 5;

            let text = "";

            let tabulationCount = 0;

            function resetTabulation() {
                tabulationCount = 0;
            }

            this.tab = function (count = 1) {
                const column = getColumn();
                const nextTab = Math.trunc((column + TAB_SPACING * count) / TAB_SPACING);

                tabulationCount = nextTab;
            }

            let indentationCount = 0;

            function resetIndentation() {
                indentationCount = 0;
            }

            this.indent = function (count = 1) {
                indentationCount += count;
            }

            this.indentBk = function (count = 1) {
                indentationCount -= count;
            }

            function insertLineBreak() {
                text += "\n";
            }

            this.brkLn = function () {
                insertLineBreak();
                resetTabulation();
            }

            function getColumn() {
                let i = text.length - 1;
                while (text[i] !== "\n" && c > 0)
                    i--;

                return text.length - 1 - i;
            }

            function insertTabulation() {
                const column = getColumn();
                const tabulation = TAB_SPACING * (indentationCount + tabulationCount);

                if (tabulation > column)
                    text += " ".repeat(tabulation - column);
            }

            this.clr = function () {
                text = "";
                resetIndentation();
            }

            this.write = function (value) {
                insertTabulation();
                text += value;
            }

            this.writeLn = function (value) {
                this.brkLn();
                this.write(value);
            }

            this.dump = function (element, propertyName) {
                element[propertyName] = text;
            }
        };

        let itemsCount = 0;

        function listMemberInfo(member) {
            Consolify.indent();

            Consolify.writeLn(`Member "${member.name}":`);

            Consolify.writeLn(`- Type: ${MemberType.convertToString(member.memberType)}`);

            if (Enumeration.isFlagSet(MemberType.Property, member.memberType)) {
                Consolify.writeLn(`- Value type: "${member.type.name}"`);
            }

            Consolify.writeLn(`(End of member "${member.name}")`)

            Consolify.indentBk();

            itemsCount++;
        }

        function listTypeInfo(type) {
            Consolify.indent();

            Consolify.writeLn(`Type "${type.name}":`);

            let parentTypes = [...type.getParentTypes()];
            Consolify.writeLn(`- ${parentTypes.length} parent type(s):`);

            for (let parentType of parentTypes)
                listTypeInfo(parentType);

            let staticMembers = [...type.getMembers(MemberSelectionType.AnyStatic)];
            Consolify.writeLn(`- ${staticMembers.length} static member(s):`);

            for (let staticMember of staticMembers) {
                listMemberInfo(staticMember);
            }

            let members = [...type.getMembers(MemberSelectionType.Any)]
            Consolify.writeLn(`- ${members.length} member(s):`);

            for (let member of members)
                listMemberInfo(member);

            Consolify.writeLn(`(End of type "${type.name}")`)

            Consolify.indentBk();

            itemsCount++;
        }

        function doListTypeInfo(method) {
            Consolify.clr();

            itemsCount = 0;

            const startTime = Date.now();

            Consolify.indentBk();

            let classOrInstanceName = typeNameText.value;
            let classOrInstance = eval(classOrInstanceName);

            if (classOrInstance === undefined)
                Consolify.writeLn(`The specified class "${classOrInstanceName}" does not exist or has not been exported to the root context.`);

            let type = null;

            try {
                switch (method) {
                    case "of":
                        type = Type.of(classOrInstance);
                        break;

                    case "get":
                        type = Type.get(classOrInstance);
                        break;
                }
            }
            catch (e) {
                Consolify.writeLn(`Test failed with error:`);

                Consolify.indent();

                Consolify.writeLn(e.toString());

                Consolify.indentBk();
            }

            if (type !== null)
                listTypeInfo(type);

            let secs = (Date.now() - startTime) / 1000,
                speed = Math.round(itemsCount / secs);

            Consolify.writeLn("-".repeat(20));
            Consolify.writeLn(`Total items: ${itemsCount}; total time: ${secs}s; ${speed}item(s)/s.`)

            Consolify.dump(typeDataOutputText, "value");
        }
    </script>

    <style type="text/css">
        textarea {
            display: block;
            width: 100%;
            height: 700px;
        }
    </style>
</head>
<body>
    <h1>Framework Standards.Types.js module Test</h1>
    <br />
    <label>Enter a type or object name: <input type="text" id="typeNameText" pattern="[$_A-Za-z]\w*"></label>
    <button onclick="doListTypeInfo('get')">get()</button>
    <button onclick="doListTypeInfo('of')">of()</button>
    <br />
    <textarea id="typeDataOutputText"></textarea>
</body>
</html>