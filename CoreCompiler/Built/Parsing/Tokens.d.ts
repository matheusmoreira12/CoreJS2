import { TokenModel } from "../Tokens/Token.js";
export declare namespace Tokens {
    const abstractToken: TokenModel;
    const breakToken: TokenModel;
    const charToken: TokenModel;
    const debuggerToken: TokenModel;
    const doubleToken: TokenModel;
    const exportToken: TokenModel;
    const finallyToken: TokenModel;
    const gotoToken: TokenModel;
    const inToken: TokenModel;
    const letToken: TokenModel;
    const nullToken: TokenModel;
    const publicToken: TokenModel;
    const superToken: TokenModel;
    const throwToken: TokenModel;
    const tryToken: TokenModel;
    const volatileToken: TokenModel;
    const argumentsToken: TokenModel;
    const byteToken: TokenModel;
    const classToken: TokenModel;
    const defaultToken: TokenModel;
    const elseToken: TokenModel;
    const extendsToken: TokenModel;
    const floatToken: TokenModel;
    const ifToken: TokenModel;
    const instanceofToken: TokenModel;
    const longToken: TokenModel;
    const packageToken: TokenModel;
    const returnToken: TokenModel;
    const switchToken: TokenModel;
    const throwsToken: TokenModel;
    const typeofToken: TokenModel;
    const whileToken: TokenModel;
    const awaitToken: TokenModel;
    const caseToken: TokenModel;
    const constToken: TokenModel;
    const deleteToken: TokenModel;
    const enumToken: TokenModel;
    const falseToken: TokenModel;
    const forToken: TokenModel;
    const implementsToken: TokenModel;
    const intToken: TokenModel;
    const nativeToken: TokenModel;
    const privateToken: TokenModel;
    const shortToken: TokenModel;
    const synchronizedToken: TokenModel;
    const transientToken: TokenModel;
    const varToken: TokenModel;
    const withToken: TokenModel;
    const booleanToken: TokenModel;
    const catchToken: TokenModel;
    const continueToken: TokenModel;
    const doToken: TokenModel;
    const evalToken: TokenModel;
    const finalToken: TokenModel;
    const functionToken: TokenModel;
    const importToken: TokenModel;
    const interfaceToken: TokenModel;
    const newToken: TokenModel;
    const protectedToken: TokenModel;
    const staticToken: TokenModel;
    const thisToken: TokenModel;
    const trueToken: TokenModel;
    const voidToken: TokenModel;
    const yieldToken: TokenModel;
    const equalsToken: TokenModel;
    const plusToken: TokenModel;
    const dashToken: TokenModel;
    const asteriskToken: TokenModel;
    const greaterThanToken: TokenModel;
    const lesserThanToken: TokenModel;
    const slashToken: TokenModel;
    const percentToken: TokenModel;
    const backslashToken: TokenModel;
    const commaToken: TokenModel;
    const semicolonToken: TokenModel;
    const colonToken: TokenModel;
    const dotToken: TokenModel;
    const ampersandToken: TokenModel;
    const questionToken: TokenModel;
    const exclamationToken: TokenModel;
    const openParenToken: TokenModel;
    const closeParenToken: TokenModel;
    const openBracketToken: TokenModel;
    const closeBracketToken: TokenModel;
    const openBraceToken: TokenModel;
    const closeBraceToken: TokenModel;
    const singleQuoteToken: TokenModel;
    const doubleQuoteToken: TokenModel;
    const atToken: TokenModel;
    const barToken: TokenModel;
    const graveToken: TokenModel;
    const dollarToken: TokenModel;
    const tildeToken: TokenModel;
    const caretToken: TokenModel;
    const singleQuoteStringToken: TokenModel;
    const doubleQuoteStringToken: TokenModel;
    const additionOperatorToken: TokenModel;
    const subtractionOperatorToken: TokenModel;
    const multiplicationOperatorToken: TokenModel;
    const divisionOperatorToken: TokenModel;
    const modulusOperatorToken: TokenModel;
    const exponentiationOperatorToken: TokenModel;
    const incrementOperatorToken: TokenModel;
    const decrementOperatorToken: TokenModel;
    const greaterThanOperatorToken: TokenModel;
    const lesserThanOperatorToken: TokenModel;
    const greaterThanOrEqualsOperatorToken: TokenModel;
    const lesserThanOrEqualsOperatorToken: TokenModel;
    const equalsOperatorToken: TokenModel;
    const notEqualsOperatorToken: TokenModel;
    const andOperatorToken: TokenModel;
    const orOperatorToken: TokenModel;
    const notOperatorToken: TokenModel;
    const bitwiseAndOperatorToken: TokenModel;
    const bitwiseOrOperatorToken: TokenModel;
    const bitwiseXorOperatorToken: TokenModel;
    const bitwiseNotOperatorToken: TokenModel;
    const leftShiftOperatorToken: TokenModel;
    const signPropagatingRightShiftOperatorToken: TokenModel;
    const zeroFillRightShiftOperatorToken: TokenModel;
    const simpleAssignOperatorToken: TokenModel;
    const addAssignOperatorToken: TokenModel;
    const subtractAssignOperatorToken: TokenModel;
    const multiplyAssignOperatorToken: TokenModel;
    const divideAssignOperatorToken: TokenModel;
    const negationOperatorToken: TokenModel;
    const concatenationOperatorToken: TokenModel;
    const conditionalOperatorToken: TokenModel;
    const typeofOperator: TokenModel;
}
